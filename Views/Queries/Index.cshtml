@model PaginatedList<TekDesk.Models.Query>

@{
    ViewData["Title"] = "Index";

    var url = @Context.Request.Path.ToString();
    var action = "Index";

    if (url.Contains("MyQueries"))
    {
        action = "MyQueries";
    }
}

<h1 class="mb-4">@TempData["Title"]</h1>

<div class="row">
    <div class="col-md-5">
        <form asp-action="@action" method="get">
            <div class="form-actions no-color">
                <p class="my-auto">
                    Search: <input type="text" name="searchTerm" value="@ViewData["SearchTerm"]" />
                    <input type="submit" value="Search" class="btn btn-outline-primary" />
                    <a asp-action="@action" class="btn btn-secondary">Back to Full List</a>
                </p>
            </div>
        </form>
    </div>
</div>


<table class="table table-hover styled-table">
    <thead>
        <tr>
            <th>
                Full Name
            </th>
            <th>
                Description
            </th>
            <th>
                <a class="link" asp-action="@action" asp-route-sortOrder="@ViewData["StateSortParam"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">State <i class="fas fa-sort"></i></a>
            </th>
            <th>
                <a class="link" asp-action="@action" asp-route-sortOrder="@ViewData["DateSortParam"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Date Added <i class="fas fa-sort"></i></a>
            </th>
            <th>
                Type
            </th>

        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {

            <tr class="clickable" onclick="location.href = '@(Url.Action("Details", "Queries", new { id = item.QueryID } ))'">
                <td>
                    @Html.DisplayFor(modelItem => item.Employee.FullName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.QState)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Added)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Tag)
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
    var activePage = "";
}

<nav>
    <ul class="pagination justify-content-end">
        <li class="page-item @prevDisabled">
            <a asp-action="@action"
               asp-route-sortOrder="@ViewData["CurrentSort"]"
               asp-route-pageNumber="@(Model.PageIndex - 1)"
               asp-route-currentFilter="@ViewData["CurrentFilter"]"
               class="btn btn-default page-link">
                Previous
            </a>
        </li>
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            if (Model.PageIndex + 1 == i)
            {
                activePage = "active";
            }
            <li class="page-item">
                <a class="page-link @activePage"
                   asp-action="@action"
                   asp-route-sortOrder="@ViewData["CurrentSort"]"
                   asp-route-pageNumber="@i"
                   asp-route-currentFilter="@ViewData["CurrentFilter"]">
                    @i
                </a>
            </li>
        }
        <li class="page-item @nextDisabled">
            <a asp-action="@action"
               asp-route-sortOrder="@ViewData["CurrentSort"]"
               asp-route-pageNumber="@(Model.PageIndex + 1)"
               asp-route-currentFilter="@ViewData["CurrentFilter"]"
               class="btn btn-default page-link">
                Next
            </a>
        </li>
    </ul>
</nav>




